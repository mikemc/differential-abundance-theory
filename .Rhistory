radius=delta)
}
dists
tax_parathaa <- result %>%
group_by(query.name) %>%
summarize(Kingdom  = pick.taxon(Kingdom),
Phylum = pick.taxon(Phylum),
Class = pick.taxon(Class),
Order = pick.taxon(Order),
Family = pick.taxon(Family),
Genus = pick.taxon(Genus),
Species = pick.taxon(Species))
tax_parathaa_OG
tax_parathaa_OG <- tax_parathaa
## nearest.neighbor.distance code is extremely slow need to fix this at somepoint
## not a prority issue though.
if(delta>0){
dists <- nearest.neighbor.distances(tax.df=tax_parathaa,
placement.object=in.jplace,
reference.tree=in.tree,
max.radius=delta)
tax_parathaa <- nearest.neighbor.revisions(tax.df=tax_parathaa,
distances=dists,
radius=delta)
}
dists <- nearest.neighbor.distances(tax.df=tax_parathaa,
placement.object=in.jplace,
reference.tree=in.tree,
max.radius=delta)
tax_parathaa <- nearest.neighbor.revisions(tax.df=tax_parathaa,
distances=dists,
radius=delta)
View(tax_parathaa)
View(tax_parathaa_OG)
is.na(tax_parathaa$Species)
length(is.na(tax_parathaa$Species))
length(is.na(tax_parathaa_OG$Species))
grepl(";", tax_parathaa_OG$Species)
length(grepl(";", tax_parathaa_OG$Species))
length(is.na(tax_parathaa_OG$Species))
length(which(grepl(";", tax_parathaa_OG$Species)))
length(which(grepl(";", tax_parathaa$Species)))
length(which(is.na(tax_parathaa$Species)))
length(which(is.na(tax_parathaa_OG$Species)))
tax.df <- tax_parathaa_OG
placement.object <- in.jplace
reference.tree <- in.tree
max.radius <- 0.02
queries.w.species <- tax.df %>%
filter(!is.na(Species)) %>%
pull(query.name)
View(queries.w.species)
queries.w.species
dists <- data.frame("query.name"=NA, "Placement"=NA, "like_weight_ratio"=NA, "Nearest_Dist"=NA)
nm <- queries.w.species[1]
if(!"tbl_tree" %in% class(reference.tree)){class(reference.tree) <- c("tbl_tree", class(reference.tree))}
plotTree <- as.phylo(reference.tree)
## Extract placements
plc <- placement.object@placements[which(placement.object@placements$name==nm),] %>% arrange(desc(like_weight_ratio))
print(paste(which(queries.w.species==nm), "of", length(queries.w.species)))
View(plc)
pind <- 1
## Add placement into tree
plotTree <- as.phylo(reference.tree)
plotTree <- bind.tip(plotTree, tip.label=paste0("Placement_", pind),
edge.length=plc$pendant_length[pind], where=plc$node[pind],
position=plc$distal_length[pind])
plc1 <- which(plotTree$tip.label==paste0("Placement_", pind))
plc1
## Get neighbors within a given radius
neighbors <- extract_tip_radius(plotTree, focal_tip = paste0("Placement_", pind), radius = max.radius, include_subtree = FALSE)
neighbors
length(neighbors$radius_tips)
neighbors <- extract_tip_radius(plotTree, focal_tip = paste0("Placement_", pind), radius = max.radius, include_subtree = TRUE)
neighbors
labelInfo <- reference.tree %>% select(label, Kingdom, Phylum, Class, Order, Family, Genus, Species)
labelInfo
plotTree2 <- left_join(as_tibble(neighbors$subtree), labelInfo, by="label")
plotTree2
plotTree2$isTip <- isTip(plotTree2, plotTree2$node)
if(!"tbl_tree" %in% class(plotTree2)){class(plotTree2) <- c("tbl_tree", class(plotTree2))}
parName <- tax.df %>% filter(query.name==nm) %>% pull(Species)
parName
diff.neighbors <-plotTree2  %>%
filter(is.na(Species) | !str_detect(string=parName, pattern=Species)) %>%
filter(isTip) %>% pull(node)
diff.neighbors
placement_node <- plotTree2 %>% filter(label==paste0("Placement_", pind)) %>% pull(node)
placement_node
descendents_of_index <- offspring(neighbors$subtree, parent(neighbors$subtree, placement_node), type = "tips")
descendents_of_index
#eligible.tips <- setdiff(diff.neighbors, placement_node) # change this as test
eligible.tips <- setdiff(diff.neighbors, descendents_of_index)
eligible.tips
if(length(eligible.tips)==0){
dists <- rbind(dists, c(nm, paste0("Placement_", pind),
plc[pind,] %>% pull(like_weight_ratio),
NA))} else {
nearest_neighbor <- find_nearest_tips(neighbors$subtree, target_tips = eligible.tips)
dists <- rbind(dists, c(nm, paste0("Placement_", pind),
plc[pind,] %>% pull(like_weight_ratio),
nearest_neighbor$nearest_distance_per_tip[placement_node]))
}
dists
## Format and calculate minimum distance per query
dists <- dists %>% filter(!is.na(query.name))
dists$like_weight_ratio <- as.numeric(dists$like_weight_ratio)
dists$Nearest_Dist <- as.numeric(dists$Nearest_Dist)
dists <- dists %>%
group_by(query.name) %>%
filter(!is.na(Nearest_Dist)) %>%
filter(Nearest_Dist!=2e-12) %>%
summarize(minDist = min(Nearest_Dist, na.rm=T))
dists
dists <- rbind(dists, c(nm, paste0("Placement_", pind),
plc[pind,] %>% pull(like_weight_ratio),
NA))} else {
dists <- rbind(dists, c(nm, paste0("Placement_", pind),
plc[pind,] %>% pull(like_weight_ratio),
NA))} else {
dists <- rbind(dists, c(nm, paste0("Placement_", pind),
plc[pind,] %>% pull(like_weight_ratio),
NA))} else {
dists <- rbind(dists, c(nm, paste0("Placement_", pind),
plc[pind,] %>% pull(like_weight_ratio),
NA))} else {
if(length(eligible.tips)==0){
dists <- rbind(dists, c(nm, paste0("Placement_", pind),
plc[pind,] %>% pull(like_weight_ratio),
NA))} else {
nearest_neighbor <- find_nearest_tips(neighbors$subtree, target_tips = eligible.tips)
dists <- rbind(dists, c(nm, paste0("Placement_", pind),
plc[pind,] %>% pull(like_weight_ratio),
nearest_neighbor$nearest_distance_per_tip[placement_node]))
}
dists
queries.w.species <- tax.df %>%
filter(!is.na(Species)) %>%
pull(query.name)
dists <- data.frame("query.name"=NA, "Placement"=NA, "like_weight_ratio"=NA, "Nearest_Dist"=NA)
for(nm in queries.w.species){
if(!"tbl_tree" %in% class(reference.tree)){class(reference.tree) <- c("tbl_tree", class(reference.tree))}
plotTree <- as.phylo(reference.tree)
## Extract placements
plc <- placement.object@placements[which(placement.object@placements$name==nm),] %>% arrange(desc(like_weight_ratio))
print(paste(which(queries.w.species==nm), "of", length(queries.w.species)))
#go through each palcement
for(pind in 1:nrow(plc)){
## Add placement into tree
plotTree <- as.phylo(reference.tree)
plotTree <- bind.tip(plotTree, tip.label=paste0("Placement_", pind),
edge.length=plc$pendant_length[pind], where=plc$node[pind],
position=plc$distal_length[pind])
plc1 <- which(plotTree$tip.label==paste0("Placement_", pind))
## Get neighbors within a given radius
neighbors <- extract_tip_radius(plotTree, focal_tip = paste0("Placement_", pind), radius = max.radius, include_subtree = FALSE)
if(length(neighbors$radius_tips)==1){
dists <- rbind(dists, c(nm, paste0("Placement_", pind),
plc[pind,] %>% pull(like_weight_ratio),
NA))
break()
} else {
neighbors <- extract_tip_radius(plotTree, focal_tip = paste0("Placement_", pind), radius = max.radius, include_subtree = TRUE)
}
#grab taxa info from reference tree
labelInfo <- reference.tree %>% select(label, Kingdom, Phylum, Class, Order, Family, Genus, Species)
plotTree2 <- left_join(as_tibble(neighbors$subtree), labelInfo, by="label")
plotTree2$isTip <- isTip(plotTree2, plotTree2$node)
if(!"tbl_tree" %in% class(plotTree2)){class(plotTree2) <- c("tbl_tree", class(plotTree2))}
#grab the parent node of the placements species assignment
parName <- tax.df %>% filter(query.name==nm) %>% pull(Species)
diff.neighbors <-plotTree2  %>%
filter(is.na(Species) | !str_detect(string=parName, pattern=Species)) %>%
filter(isTip) %>% pull(node)
placement_node <- plotTree2 %>% filter(label==paste0("Placement_", pind)) %>% pull(node)
descendents_of_index <- offspring(neighbors$subtree, parent(neighbors$subtree, placement_node), type = "tips")
#eligible.tips <- setdiff(diff.neighbors, placement_node) # change this as test
eligible.tips <- setdiff(diff.neighbors, descendents_of_index)
if(length(eligible.tips)==0){
dists <- rbind(dists, c(nm, paste0("Placement_", pind),
plc[pind,] %>% pull(like_weight_ratio),
NA))}
else {
nearest_neighbor <- find_nearest_tips(neighbors$subtree, target_tips = eligible.tips)
dists <- rbind(dists, c(nm, paste0("Placement_", pind),
plc[pind,] %>% pull(like_weight_ratio),
nearest_neighbor$nearest_distance_per_tip[placement_node]))
}
}
}
dists
View(dists)
## Format and calculate minimum distance per query
dists <- dists %>% filter(!is.na(query.name))
dists$like_weight_ratio <- as.numeric(dists$like_weight_ratio)
dists$Nearest_Dist <- as.numeric(dists$Nearest_Dist)
#why do we remove 2e-12 distances?
dists <- dists %>%
group_by(query.name) %>%
filter(!is.na(Nearest_Dist)) %>%
filter(Nearest_Dist!=2e-12) %>%
summarize(minDist = min(Nearest_Dist, na.rm=T))
if(!"tbl_tree" %in% class(reference.tree)){class(reference.tree) <- c("tbl_tree", class(reference.tree))}
plotTree <- as.phylo(reference.tree)
## Extract placements
plc <- placement.object@placements[which(placement.object@placements$name==nm),] %>% arrange(desc(like_weight_ratio))
plc
View(plc)
nm <- queries.w.species[1]
if(!"tbl_tree" %in% class(reference.tree)){class(reference.tree) <- c("tbl_tree", class(reference.tree))}
plotTree <- as.phylo(reference.tree)
## Extract placements
plc <- placement.object@placements[which(placement.object@placements$name==nm),] %>% arrange(desc(like_weight_ratio))
plc
plc <- plc %>% filter(like_weight_ratio > 0.5*max(like_weight_ratio))
plc
print(paste(which(queries.w.species==nm), "of", length(queries.w.species)))
## Add placement into tree
plotTree <- as.phylo(reference.tree)
plotTree <- bind.tip(plotTree, tip.label=paste0("Placement_", pind),
edge.length=plc$pendant_length[pind], where=plc$node[pind],
position=plc$distal_length[pind])
View(plotTree)
plotTree$tip.label
grep("Placement_", plotTree$tip.label)
plotTree$tip.label[7838]
## Get neighbors within a given radius
neighbors <- extract_tip_radius(plotTree, focal_tip = paste0("Placement_", pind), radius = max.radius, include_subtree = FALSE)
neighbours
neighbors
?extract_tip_radius
## if there are no other tips within the max.radius then we just return NA as the nearest_dist
if(length(neighbors$radius_tips)==1){
dists <- rbind(dists, c(nm, paste0("Placement_", pind),
plc[pind,] %>% pull(like_weight_ratio),
NA))
break()
} else {
neighbors <- extract_tip_radius(plotTree, focal_tip = paste0("Placement_", pind), radius = max.radius, include_subtree = TRUE)
}
#grab taxa info from reference tree
labelInfo <- reference.tree %>% select(label, Kingdom, Phylum, Class, Order, Family, Genus, Species)
reference.tree$label <- make.unique(reference.tree$label)
#grab taxa info from reference tree
labelInfo <- reference.tree %>% select(label, Kingdom, Phylum, Class, Order, Family, Genus, Species)
plotTree2 <- left_join(as_tibble(neighbors$subtree), labelInfo, by="label")
View(plotTree2)
?bind.tip
plotTree2$isTip <- isTip(plotTree2, plotTree2$node)
if(!"tbl_tree" %in% class(plotTree2)){class(plotTree2) <- c("tbl_tree", class(plotTree2))}
#grab the parent node of the placements species assignment
parName <- tax.df %>% filter(query.name==nm) %>% pull(Species)
diff.neighbors <-plotTree2  %>%
filter(is.na(Species) | !str_detect(string=parName, pattern=Species)) %>%
filter(isTip) %>% pull(node)
diff.neighbors
?str_detect
View(plotTree2)
parName
placement_node <- plotTree2 %>% filter(label==paste0("Placement_", pind)) %>% pull(node)
placement_node
descendents_of_index <- offspring(neighbors$subtree, parent(neighbors$subtree, placement_node), type = "tips")
descendents_of_index
ggtee(plotTree2)
ggtree(plotTree2)
ggtree(as.phylo(plotTree2))
ggtree(as.phylo(plotTree2)) + geom_tiplab()
parName
nm
tax.df
plc
plc1
plc1
pbind
pind
plc
View(reference.tree)
View(plotTree2)
in.duplictes <- "~/Repos/Parathaa2_OP3/M4_Oct22/De-REP_TREE_BUILDING/dup_index.tsv"
in.taxon <- "~/Repos/Parathaa2_OP3/M4_Oct22/taxmapper.tsv"
in.seqs <- "~/Repos/Parathaa2_OP3/M4_Oct22/De-REP_TREE_BUILDING/filter_seqs_no_N.fasta"
library(seqinr)
library(tidyr)
library(dplyr)
taxdata <- read.table(in.taxon, header=T, fill=TRUE,sep='\t', quote="")
isSILVA=FALSE
# the IDs that come with the file specific ID to the sequence but they also have start and stop for the sequence!
if("start" %in% colnames(taxdata)){
isSILVA <- TRUE
taxdata <- taxdata %>%
unite("AccID", c("primaryAccession", "start", "stop"), sep=".", remove=F)
suppressWarnings({
taxdata <- taxdata %>%
separate(col=path, into=c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus"), sep=";") %>%
dplyr::rename(Species = organism_name) %>%
filter(Kingdom=="Bacteria")
})
}else{
taxdata$path <- gsub("\\|t__.*", "", taxdata$path)
taxdata$path <- gsub("[a-z]__", "", taxdata$path)
taxdata <- taxdata %>% separate(col=path, into=c("Kingdom", "Phylum", "Class",
"Order", "Family", "Genus", "Species"), sep="\\|", remove=F)
}
dup_index <- read.table(in.duplicates, sep="\t", header=F)
in.duplicates <- "~/Repos/Parathaa2_OP3/M4_Oct22/De-REP_TREE_BUILDING/dup_index.tsv"
dup_index <- read.table(in.duplicates, sep="\t", header=F)
og_seqs <- read.fasta(in.seqs)
dup_index <- dup_index %>% separate_wider_delim(cols = V2, delim = ",", names_sep = "", too_few="align_start")
rownames(dup_index) <- paste("dup_seq", seq(1:length(dup_index$V1)), sep="_")
rownames(dup_index)
#okay for each duplicate sequence we need to go through and grab the SGB taxon that is associated with it...
seqs_to_remove <- list()
for(i in 1:length(rownames(dup_index))){
message(i)
seq_ids <- c(unlist(dup_index[i,]))
seq_ids <- gsub("^ ", "", seq_ids)
seq_ids <- seq_ids[-1]
seq_ids <- seq_ids[!is.na(seq_ids)]
seq_ids_fix <- gsub(".*\\|", "", seq_ids)
names(seq_ids_fix) <- taxdata$path[match(seq_ids_fix, taxdata$primaryAccession)]
unique_taxa <- names(table(names(seq_ids_fix)))
seqs_to_keep <- c()
for(j in unique_taxa){
seqs_to_keep[j] <- which(names(seq_ids_fix)==j)[1]
}
seqs_to_remove[[i]] <- seq_ids[-seqs_to_keep]
}
seqs_to_remove
length(seqs_to_remove)
filt_seqs <- og_seqs[-which(names(og_seqs) %in% unlist(seqs_to_remove))]
length(filt_seqs)
m4_SGBdata <- read.table(opts$c, sep="\t", skip=1, comment.char = "", header=T)
SGBdata <- opts$c
#SGBdata <- opts$c
SGBdata <- "~/Repos/Parathaa2_OP3/M4_Oct22/SGB.Oct22.txt"
m4_SGBdata <- read.table(opts$c, sep="\t", skip=1, comment.char = "", header=T)
m4_SGBdata <- read.table(SGBdata, sep="\t", skip=1, comment.char = "", header=T)
m4_SGB_filt <- m4_SGBdata[which(m4_SGBdata$X..Label=="SGB"),]
View(taxdata)
Genomedata <- "~/Repos/Parathaa2_OP3/M4_Oct22/sequences.Oct22.txt"
m4_SGBdata <- read.table(Genomedata, sep="\t", skip=1, comment.char = "", header=T)
View(Genomedata)
View(m4_SGBdata)
m4_SGBdata <- read.table(Genomedata, sep="\t", comment.char = "", header=F)
m4_SGBdata <- read.table(Genomedata, sep="\t", comment.char = "", header=T)
names(filt_seqs)
metaref_IDs <- gsub(".*\\|", "", names(filt_seqs))
m4_SGBdata_filt <- m4_SGBdata %>% filter(genome_type=="genome")
dim(m4_SGBdata)
dim(m4_SGBdata_filt)
which(metaref_IDs %in% m4_SGBdata_filt$X..metarefsgb_id)
length(which(metaref_IDs %in% m4_SGBdata_filt$X..metarefsgb_id))
14 + 27
keep_seqs <- which(metaref_IDs %in% m4_SGBdata_filt$X..metarefsgb_id)
filt_seqs <- filt_seqs[keep_seqs]
write.fasta(filt_seqs, names=names(filt_seqs), file.out = "~/Repos/Parathaa2_OP3/M4_Oct22/De-REP_TREE_BUILDING/filter_seqs_de_dup_with_spec_dup_all_isolates.fasta")
devtools::install_github("yijuanhu/LOCOM")
library(LOCOM)
data("throat.otu.table")
data("throat.meta")
data("throat.otu.taxonomy")
# filtering out three samples with antibiotic use
filter.out.sam <- which(throat.meta$AntibioticUsePast3Months_TimeFromAntibioticUsage != "None")
throat.otu.table.filter <- throat.otu.table[-filter.out.sam,]
throat.meta.filter <- throat.meta[-filter.out.sam,]
Y <- ifelse(throat.meta.filter$SmokingStatus == "NonSmoker", 0, 1)
C <- ifelse(throat.meta.filter$Sex == "Male", 0, 1)
# filtering out rare OTUs
prop.presence <- colMeans(throat.otu.table.filter > 0)
filter.out.otu <- which(prop.presence < 0.2)
if (length(filter.out.otu) > 0) {
throat.otu.table.filter <- throat.otu.table.filter[, -filter.out.otu]
prop.presence <- prop.presence[-filter.out.otu]
}
# running locom
res <- locom(otu.table = throat.otu.table.filter, Y = Y, C = C, seed = 1, n.cores=4, n.perm.max = 1000)
res$p.global
res$detected.otu
# summarizing results
w <- match(res$detected.otu, colnames(res$p.otu))
o <- w[order(res$p.otu[w])]
summary.table <- data.frame(otu.name = colnames(res$p.otu)[o],
mean.freq = colMeans(throat.otu.table.filter/rowSums(throat.otu.table.filter))[o],
prop.presence = prop.presence[o],
p.value = signif(res$p.otu[o], 3),
q.value = signif(res$q.otu[o], 3),
effect.size = signif(res$effect.size[o], 3),
otu.tax = throat.otu.taxonomy[as.numeric(colnames(res$p.otu)[o]) + 1],
row.names = NULL)
summary.table
View(summary.table)
res
View(rres)
res$p.otu
?locom
data("otu.table.1")
data("otu.table.2")
data("meta.1")
data("meta.2")
# preparing Y1, Y2, C1, C2
Y1 <- cbind(1*(meta.1[,"Y"]==1), 1*(meta.1[,"Y"]==2)) # get design matrix for a three-level factor
Y2 <- cbind(1*(meta.2[,"Y"]==1), 1*(meta.2[,"Y"]==2))
C1 <- meta.1[,"C"]
C2 <- meta.2[,"C"]
# restricting to a subset of samples and OTUs for speed
sub.sam.1 <- c(31:60)
sub.sam.2 <- c(1:20, 51:60)
otu.table.1 <- otu.table.1[sub.sam.1, 1:70]
otu.table.2 <- otu.table.2[sub.sam.2, 1:70]
Y1 <- Y1[sub.sam.1,]
C1 <- C1[sub.sam.1]
Y2 <- Y2[sub.sam.2,]
C2 <- C2[sub.sam.2]
# running Com2seq
res.Com2seq <- Com2seq(table1 = otu.table.1, table2 = otu.table.2, Y1 = Y1, Y2 = Y2, C1 = C1, C2 = C2,
seed = 123, n.cores = 1, n.perm.max = 1000)
res.Com2seq$p.global.omni
res.Com2seq$detected.taxa.omni
?Com2seq
?locom
res$detected.otu
res$p.global
res$n.perm.completed
install.packages("speedyseq")
install.packages("fs")
remotes::install_github("mikemc/speedyseq")
BiocManager::install("phyloseq")
remotes::install_github("mikemc/speedyseq")
devtools::install_github("mikemc/metacal")
library(fs)
# Tools for general purpose data manipulation and plotting
library(tidyverse)
# ```{r libraries}
# Tools for microbiome data
library(speedyseq)
# ```{r libraries}
# Tools for microbiome data
library(speedyseq)
# Tools for general purpose data manipulation and plotting
library(tidyverse)
library(fs)
library(metacal); packageVersion("metacal")
colors_brooks <- c(
"Atopobium_vaginae" = "#009E73",
"Gardnerella_vaginalis" = "#56B4E9",
"Lactobacillus_crispatus" = "#D55E00",
"Lactobacillus_iners" = "#505050",
"Prevotella_bivia" = "#0072B2",
"Sneathia_amnii" = "#CC79A7",
"Streptococcus_agalactiae" = "#E69F00"
)
dr <- system.file("extdata", package = "metacal")
list.files(dr)
actual <- file.path(dr, "brooks2015-actual.csv") |>
read.csv(row.names = "Sample") |>
as("matrix")
observed <- file.path(dr, "brooks2015-observed.csv") |>
read.csv(row.names = "Sample") |>
subset(select = - Other) |>
as("matrix")
# Estimate bias with bootstrapping for error estimation
mc_fit <- metacal::estimate_bias(observed, actual, margin = 1, boot = TRUE)
summary(mc_fit)
rm(actual, observed, dr)
control_species <- mc_fit %>% coef %>% names
control_genera <- control_species %>% str_extract('^[^_]+')
# path_momspi <- '~/research/momspi'
path_momspi <- here::here('notebook/_data/momspi')
otu <- path(path_momspi, "stirrups-profiles", "abundance-matrix.csv.bz2") %>%
read_csv(
col_types = cols(.default = col_double(), sample_name = col_character())
) %>%
otu_table(taxa_are_rows = FALSE)
# path_momspi <- '~/research/momspi'
path_momspi <- here::here('notebook/_data/momspi')
install.packages("here")
# path_momspi <- '~/research/momspi'
path_momspi <- here::here('notebook/_data/momspi')
otu <- path(path_momspi, "stirrups-profiles", "abundance-matrix.csv.bz2") %>%
read_csv(
col_types = cols(.default = col_double(), sample_name = col_character())
) %>%
otu_table(taxa_are_rows = FALSE)
?here
setwd("~/Repos/")
# path_momspi <- '~/research/momspi'
path_momspi <- here::here('notebook/_data/momspi')
otu <- path(path_momspi, "stirrups-profiles", "abundance-matrix.csv.bz2") %>%
read_csv(
col_types = cols(.default = col_double(), sample_name = col_character())
) %>%
otu_table(taxa_are_rows = FALSE)
getwd()
setwd("~/Repos/differential-abundance-theory/")
getqwd()
getwd()
# path_momspi <- '~/research/momspi'
path_momspi <- here::here('notebook/_data/momspi')
otu <- path(path_momspi, "stirrups-profiles", "abundance-matrix.csv.bz2") %>%
read_csv(
col_types = cols(.default = col_double(), sample_name = col_character())
) %>%
otu_table(taxa_are_rows = FALSE)
getwd()
otu <- path(path_momspi, "stirrups-profiles", "abundance-matrix.csv.bz2") %>%
read_csv(
col_types = cols(.default = col_double(), sample_name = col_character())
) %>%
otu_table(taxa_are_rows = FALSE)
library(here)
i_am()
i_am("~/Repos/differential-abundance-theory/")
